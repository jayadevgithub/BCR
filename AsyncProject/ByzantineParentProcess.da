

class ParentProcess(process):

    def setup(total_replica_count: int):
        self.operations_result_list = []
        self.logger = logging.getLogger("ParentProcess ")
        self.logger.setLevel(logging.INFO)
        # self.logger.addHandler(handler)
        self.handler = logging.FileHandler(
            str(timestamp) + '_ParentProcess.log')
        self.handler.setLevel(logging.INFO)
        self.formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.handler.setFormatter(formatter)
        self.logger.addHandler(handler)

        self.data_object = {}
        self.global_result_of_operations = {}
        self.global_seq_id = 0
        self.client_request_map = {}


    def receive(msg=('get_result_from_parent_process', globalseqid), from_=client):
        logger.info(
            "received: 'get_result_from_parent_process' FROM client, global_sequence_id=%s", str(globalseqid))
        result = self.global_result_of_operations[str(globalseqid)]
        logger.info("presult=%s", str(result))
        send(('parent_sent_result', result), to=client)
        logger.info("sent: 'parent_sent_result' TO client, with result=%s", str(result))

    def receive(msg=('parent_perform_operation', client_id, request_id, operation), from_=client):
        cache_key = '00000'+str(client_id)+'11111' + str(request_id)
        if cache_key not in client_request_map:
            logger.info("received: 'parent_perform_operation' FROM client=%s, operation=%s",str(client_id), str(operation))
            result = process_operation(operation)
            global_result_of_operations[str(global_seq_id)] = result
            self.global_seq_id += 1
            send(('parent_performed_operation', global_seq_id - 1), to=client)
            logger.info("sent: 'parent_performed_operation to client_id:%s', operation=%s, result=%s", str(client_id),str(
                operation), str(result))
            #logger.info("global result=%s", str(global_result_of_operations))
            client_request_map[cache_key] = True
        else:
            logger.info("received: duplicate 'parent_perform_operation' FROM client=%s, operation=%s with same request_id=%s",str(client_id), str(operation), str(request_id))
            send(('parent_performed_operation', global_seq_id - 1), to=client)

    def process_operation(operation):
        logger.info(
            "ParentProcess is performing the operation=%s ", str(operation))
        opcode = operation['operation']
        if opcode == "put":
            key = operation["key"]
            value = operation["value"]
            self.data_object[key] = value
            return "Success"
        elif opcode == "get":
            key = operation["key"]
            if key not in data_object:
                return "Error"
            value = data_object[key]
            return value
        elif opcode == "slice":
            key = operation["key"]
            if key not in data_object:
                return "Error"
            index1 = int(operation["value1"])
            index2 = int(operation["value2"])
            value = data_object[key]
            value = value[index1:index2]
            self.data_object[key] = value
            return value
        elif opcode == "append":
            key = operation["key"]
            if key not in data_object:
                return "Error"
            value = operation["value"]
            value = data_object[key] + value
            data_object[key] = value
            return "Success"

    def run():
        await(received(('done'), from_=self))
