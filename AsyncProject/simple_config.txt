
# test case name.  can be used to trigger test case specific code in client,
# e.g., to generate special request sequences or validate intermediate or
# final values of object state. [2017-09-12: added this item]
test_case_name = test1

# number of failures to tolerate.  number of replicas is 2t+1.
t = 2
# number of clients
num_client = 1
# client timeout, in milliseconds.  if timer expires, resend request 
# to all replicas, as described in section 3.3.
client_timeout = 100
# timeout, in milliseconds, for head and non-head servers, respectively:
# if timer expires, send reconfiguration request to Olympus, as described 
# in section 3.3.
head_timeout = 100
nonhead_timeout = 100
checkpt_interval = 100
# MAPPING OF PROCESSES TO HOSTS
# to simplify changing the hosts, we first specify a semicolon-separated
# list of hosts, and then use 0-based indices into that list to specify the
# host on which each process runs.
# list of hosts used in this scenario
hosts = localhost; 192.168.0.3; 192.168.0.4
# host on which each client runs.  in this example, client 0 runs 
# on host 1, clients 1 and 2 run on host 0.
client_hosts = 1; 0; 0
# host on which each replica runs.  same in all configurations.
replica_hosts = 0; 1; 2

# CLIENT WORKLOAD
#workload[0] = pseudorandom(833,100)
#workload[0] = put('jedi','luke skywalker); get('jedi')
workload[0] = put('jedi','luke skywalker); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi'); get('jedi')
#workload[2] = put('jedi','luke skywalker); slice('jedi','0:4'); get('jedi'); get('jedi'); get('jedi'); get('jedi')
#workload[1] = put('movie','star'); append('movie',' wars'); get('movie')
#workload[2] = pseudorandom(833,100)
workload[3] = put('movie','star'); append('movie',' wars'); get('movie')
workload[4] = pseudorandom(233,5)
workload[5] = pseudorandom(233,8)
workload[6] = pseudorandom(133,9)
workload[7] = pseudorandom(23,10)
workload[8] = pseudorandom(63,11)
workload[9] = pseudorandom(833,12)

# FAILURE SCENARIO
# failures(c,r) is the failure scenario for replica r in configuration c.
# configurations are numbered starting with 0.  replicas are numbered by
# position in the chain, starting from 0.  replicas without a specified
# failure scenario are failure-free.

#failures[0,1] = shuttle(0,1),drop_result_stmt()
#failures[0,0] = client_request(0,2), change_operation()
#failures[0,1] = forwarded_request(1,1), change_operation()
#failures[0,2] = result_shuttle(0,1),change_result(); shuttle(1,1),drop_result_stmt()
#failures[0,0] = forwarded_request(0,1), change_operation()