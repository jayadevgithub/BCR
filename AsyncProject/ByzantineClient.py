# -*- generated by 1.0.9 -*-
import da
PatternExpr_311 = da.pat.TuplePattern([da.pat.ConstantPattern('received_active_configuration_at_client'), da.pat.FreePattern('replica_set')])
PatternExpr_317 = da.pat.FreePattern('olympus')
PatternExpr_390 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_395 = da.pat.FreePattern('olympus')
PatternExpr_428 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_433 = da.pat.FreePattern('olympus')
PatternExpr_468 = da.pat.TuplePattern([da.pat.ConstantPattern('received_active_configuration_at_client'), da.pat.FreePattern(None)])
PatternExpr_474 = da.pat.FreePattern('olympus')
PatternExpr_515 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_520 = da.pat.FreePattern('olympus')
_config_object = {}

def readFromConfig():
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_2 = []
        self._ClientReceivedEvent_3 = []
        self._ClientReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_311, sources=[PatternExpr_317], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_310]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_390, sources=[PatternExpr_395], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_389]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_428, sources=[PatternExpr_433], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_468, sources=[PatternExpr_474], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_4', PatternExpr_515, sources=[PatternExpr_520], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, client_timer_expiry, **rest_634):
        super().setup(client_id=client_id, olympus=olympus, client_timer_expiry=client_timer_expiry, **rest_634)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.client_timer_expiry = client_timer_expiry
        self._state.olympus = self._state.olympus
        self._state.client_id = self._state.client_id
        self._state.request_id = 0
        self._state.private_key = None
        self._state.public_key = None
        self._state.head_replica = None
        self._state.tail_replica = None
        self._state.replica_set = []
        self.generateCryptoKeys()
        self._state.client_timer_expiry = self._state.client_timer_expiry

    def run(self):
        self.output(((('inside client run' + str(self._state.client_id)) + ' ---- ') + str(self._id)))
        self.send(('register_client_at_olympus', self._state.public_key, self._state.client_id), to=self._state.olympus)
        super()._label('_st_label_425', block=False)
        olympus = None

        def ExistentialOpExpr_426():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern443_,)) in self._ClientReceivedEvent_2:
                if (_ConstantPattern443_ == 'client_registered_at_olympus'):
                    if True:
                        return True
            return False
        _st_label_425 = 0
        while (_st_label_425 == 0):
            _st_label_425 += 1
            if ExistentialOpExpr_426():
                _st_label_425 += 1
            else:
                super()._label('_st_label_425', block=True)
                _st_label_425 -= 1
        self.output(('inside client after registration ' + str(self._id)))
        self.send(('get_current_active_configuration_from_olympus',), to=self._state.olympus)
        self.output(('olympus address is ' + str(self._state.olympus)))
        super()._label('_st_label_465', block=False)
        olympus = None

        def ExistentialOpExpr_466():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern484_, _)) in self._ClientReceivedEvent_3:
                if (_ConstantPattern484_ == 'received_active_configuration_at_client'):
                    if True:
                        return True
            return False
        _st_label_465 = 0
        while (_st_label_465 == 0):
            _st_label_465 += 1
            if ExistentialOpExpr_466():
                _st_label_465 += 1
            else:
                super()._label('_st_label_465', block=True)
                _st_label_465 -= 1
        self.output('performing operations')
        operations = getWorkLoad()
        for operation in operations:
            self.send(('perform_operation', self._state.client_id, self._state.request_id, operation, self._id), to=self._state.head_replica)
            super()._label('_st_label_512', block=False)
            olympus = None

            def ExistentialOpExpr_513():
                nonlocal olympus
                for (_, (_, _, self._state.olympus), (_ConstantPattern530_,)) in self._ClientReceivedEvent_4:
                    if (_ConstantPattern530_ == 'perform_operation'):
                        if True:
                            return True
                return False
            _st_label_512 = 0
            while (_st_label_512 == 0):
                _st_label_512 += 1
                if ExistentialOpExpr_513():
                    _st_label_512 += 1
                else:
                    super()._label('_st_label_512', block=True)
                    _st_label_512 -= 1
            else:
                if (_st_label_512 != 2):
                    continue
            if (_st_label_512 != 2):
                break

    def generateCryptoKeys(self):
        self._state.private_key = nacl.signing.SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key

    def _Client_handler_310(self, replica_set, olympus):
        self.output(('inside get current active config at client' + str(self._id)))
        self.output(((('olympus address is ' + str(olympus)) + ' at client ') + str(self._id)))
        print(replica_set)
        print(type(replica_set))
        count = 0
        for replica in replica_set:
            self._state.replica_set.append(replica)
            if (count == 0):
                self._state.head_replica = replica
            elif (count == (len(replica_set) - 1)):
                self._state.tail_replica = replica
            self.output('yo found my replicas at client')
    _Client_handler_310._labels = None
    _Client_handler_310._notlabels = None

    def _Client_handler_389(self, olympus):
        self.output((str(self._state.client_id) + 'is successfully registered yoo '))
    _Client_handler_389._labels = None
    _Client_handler_389._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'Fifo', 'clock': 'Lamport'}

    def run(self):
        T = 1
        client_timer_expiry = 1
        total_replica_count = ((2 * T) + 1)
        replica_set = self.new(Replica, num=total_replica_count)
        olympus = self.new(Olympus, num=1)
        replica_id = 0
        for replica in replica_set:
            replica_id = (replica_id + 1)
            self._setup(replica, (replica_set, replica_id))
        self._setup(olympus, (T, total_replica_count, replica_set))
        self._start(olympus)
        self._start(replica_set)
        clients = self.new(Client, num=2)
        client_id = 0
        for new_client in clients:
            self._setup(new_client, (client_id, olympus, client_timer_expiry))
            client_id = (client_id + 1)
        self._start(clients)
