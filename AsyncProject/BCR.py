# -*- generated by 1.0.9 -*-
import da
PatternExpr_538 = da.pat.TuplePattern([da.pat.ConstantPattern('add_client_at_replica'), da.pat.FreePattern('current_clock'), da.pat.FreePattern('public_key'), da.pat.FreePattern('client_id')])
PatternExpr_548 = da.pat.FreePattern('olympus')
PatternExpr_797 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation'), da.pat.FreePattern('client_id'), da.pat.FreePattern('request_id'), da.pat.FreePattern('operation'), da.pat.FreePattern('client_process'), da.pat.FreePattern('prev_order_statement'), da.pat.FreePattern('result'), da.pat.FreePattern('result_shuttle')])
PatternExpr_1052 = da.pat.TuplePattern([da.pat.ConstantPattern('store_keys'), da.pat.FreePattern('public_key'), da.pat.FreePattern('private_key')])
PatternExpr_1083 = da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])
PatternExpr_1088 = da.pat.SelfPattern()
PatternExpr_1110 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1115 = da.pat.SelfPattern()
PatternExpr_1091 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])])
PatternExpr_1118 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_1176 = da.pat.TuplePattern([da.pat.ConstantPattern('register_client_at_olympus'), da.pat.FreePattern('public_key'), da.pat.FreePattern('client_id')])
PatternExpr_1185 = da.pat.FreePattern('client')
PatternExpr_1226 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_replica'), da.pat.FreePattern('new_clock'), da.pat.FreePattern('replica')])
PatternExpr_1313 = da.pat.TuplePattern([da.pat.ConstantPattern('get_current_active_configuration_from_olympus')])
PatternExpr_1318 = da.pat.FreePattern('client')
PatternExpr_1372 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_1377 = da.pat.SelfPattern()
PatternExpr_1380 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_1550 = da.pat.TuplePattern([da.pat.ConstantPattern('received_active_configuration_at_client'), da.pat.FreePattern('replica_set')])
PatternExpr_1556 = da.pat.FreePattern('olympus')
PatternExpr_1634 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_1639 = da.pat.FreePattern('olympus')
PatternExpr_1672 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_1677 = da.pat.FreePattern('olympus')
PatternExpr_1712 = da.pat.TuplePattern([da.pat.ConstantPattern('received_active_configuration_at_client'), da.pat.FreePattern(None)])
PatternExpr_1718 = da.pat.FreePattern('olympus')
PatternExpr_1761 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_1766 = da.pat.FreePattern('olympus')
_config_object = {}
import sys
import nacl.encoding
import nacl.signing
import nacl.hash
import uuid
import copy
import random
from nacl.bindings.utils import sodium_memcmp

class History():

    def __init__(self):
        self.order_proof_for_each_slot = []

    def add_order_proof_to_history(self, order_proof):
        self.order_proof_for_each_slot.append(order_proof)

class OrderStatement():

    def __init__(self, slot, operation, replica_id):
        self.slot = slot
        self.hash_operation = None
        self.signed_hash = None
        self.replica_id = replica_id

class ResultProof():

    def __init__(self, operation, replica_Id, result):
        self.operation = operation
        self.replica_Id = replica_Id
        self.result_hash_value = result
        self.result_signed_value = result

class OrderProof():

    def __init__(self, slot, operation, replica_Id):
        self.slot = slot
        self.operation = operation
        self.replica_Id = replica_Id
        self.order_statements = []

    def add_order_statment(self, order_statement):
        self.order_statements.append(order_statement)

    def set_replica_id_in_order_proof(self, replica_Id):
        self.replica_Id = replica_Id

class Shuttle():

    def __init__(self, slot, operation):
        self.order_proof = OrderProof(slot, operation, None)
        self.result_proofs = []

    def add_order_statement_to_order_proof_in_shuttle(self, order_statement):
        new_order_statement = copy.copy(order_statement)
        self.order_proof.add_order_statment(new_order_statement)

    def add_result_proof_to_shuttle(self, result_proof):
        self.result_proofs.append(result_proof)

    def get_order_proof_from_shuttle(self):
        print('inside Shuttle')
        print(self.order_proof)
        new_order_proof = copy.copy(self.order_proof)
        return new_order_proof

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_3 = []
        self._ReplicaReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_538, sources=[PatternExpr_548], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_537]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_797, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_796]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_1052, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_1051]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_1083, sources=[PatternExpr_1088], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_1110, sources=[PatternExpr_1115], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, replica_Set, replica_Id, **rest_2388):
        super().setup(replica_Set=replica_Set, replica_Id=replica_Id, **rest_2388)
        self._state.replica_Set = replica_Set
        self._state.replica_Id = replica_Id
        self._state.client_info = {}
        self._state.public_key = None
        self._state.private_key = None
        self._state.data_object = {}
        self._state.replica_id = self._state.replica_Id
        self._state.mode = None
        self._state.result_cache = {}
        self._state.is_head_replica = False
        self._state.is_tail_replica = False
        self._state.replica_set = []
        self._state.history = None
        self._state.current_slot_number = 0
        self._state.result_cache = {}
        self._state.history = History()
        print(('**replica_id' + str(self._state.replica_Id)))
        if (self._state.replica_Id == 0):
            print('inside head_replica')
            self._state.is_head_replica = True
        elif (self._state.replica_Id == (len(self._state.replica_Set) - 1)):
            self._state.is_tail_replica = True
        for replica in self._state.replica_Set:
            self._state.replica_set.append(replica)
        print('tick')
        print(self._state.replica_set)

    def run(self):
        super()._label('_st_label_1080', block=False)
        _st_label_1080 = 0
        while (_st_label_1080 == 0):
            _st_label_1080 += 1
            if PatternExpr_1091.match_iter(self._ReplicaReceivedEvent_3, SELF_ID=self._id):
                _st_label_1080 += 1
            else:
                super()._label('_st_label_1080', block=True)
                _st_label_1080 -= 1
        self.output('my public_key is ')
        self.output('my private_key is ')
        super()._label('_st_label_1107', block=False)
        _st_label_1107 = 0
        while (_st_label_1107 == 0):
            _st_label_1107 += 1
            if PatternExpr_1118.match_iter(self._ReplicaReceivedEvent_4, SELF_ID=self._id):
                _st_label_1107 += 1
            else:
                super()._label('_st_label_1107', block=True)
                _st_label_1107 -= 1

    def is_registered_client(self, client_id):
        if (client_id in self._state.client_info):
            return True
        else:
            return False

    def check_in_result_cache(self, operation):
        return None

    def process_operation(self, operation):
        self.output('inside process operation')
        print(operation)
        print(operation['operation'])
        print((operation['operation'] is 'append'))
        opcode = operation['operation']
        print((opcode == 'append'))
        if (opcode == 'put'):
            key = operation['key']
            value = operation['value']
            self._state.data_object[key] = value
            return 'OK'
        elif (opcode == 'get'):
            key = operation['key']
            value = self._state.data_object[key]
            return value
        elif (opcode == 'slice'):
            key = operation['key']
            if (key in self._state.data_object):
                return 'Error'
            index1 = int(operation['value1'])
            index2 = int(operation['value2'])
            value = self._state.data_object[key]
            value = value[index1:index2]
            self._state.data_object[key] = value
            return value
        elif (opcode == 'append'):
            print('inside append')
            key = operation['key']
            print(('key ' + key))
            if (not (key in self._state.data_object)):
                return 'Error'
            value = operation['value']
            value = (value + self._state.data_object[key])
            return 'OK'

    def get_next_replica(self):
        print(('replica_set my id is' + str(self._state.replica_id)))
        print(self._state.replica_set)
        if (self._state.replica_id == (len(self._state.replica_set) - 1)):
            return None
        else:
            return self._state.replica_set[(self._state.replica_id + 1)]

    def get_prev_replica(self):
        if (self._state.replica_id == 0):
            return None
        else:
            return self._state.replica_set[(self._state.replica_id - 1)]

    def _Replica_handler_537(self, current_clock, public_key, client_id, olympus):
        self.output(((((('adding client in replica clientinfo at ' + str(self._id)) + ' client id is ') + str(client_id)) + ' at clock ') + str(current_clock)))
        self._state.client_info[client_id] = public_key
        self.send(('client_registered_at_replica', current_clock, self._id), to=olympus)
    _Replica_handler_537._labels = None
    _Replica_handler_537._notlabels = None

    def _Replica_handler_796(self, client_id, request_id, operation, client_process, prev_order_statement, result, result_shuttle):
        if (self.is_registered_client(client_id) is False):
            self.output('malicious client found')
        else:
            self.output(('client processing operation' + str(self._state.replica_id)))
            print(operation)
            print(('self.is_head_replica:' + str(self._state.is_head_replica)))
            if (not (self.check_in_result_cache(operation) is None)):
                pass
            elif (self._state.is_head_replica is True):
                result = self.process_operation(operation)
                print(result)
                print('result')
                order_proof = OrderProof(self._state.current_slot_number, operation, self._state.replica_id)
                order_statement = OrderStatement(self._state.current_slot_number, operation, self._state.replica_id)
                print(order_statement)
                order_proof.add_order_statment(None)
                self._state.history.add_order_proof_to_history(order_proof)
                print('hunter')
                result_proof = ResultProof(operation, self._state.replica_id, result)
                print('yo')
                result_shuttle = Shuttle(self._state.current_slot_number, operation)
                print('yo2')
                result_shuttle.add_result_proof_to_shuttle(result_proof)
                print('yo3')
                result_shuttle.add_order_statement_to_order_proof_in_shuttle(order_statement)
                next_replica = self.get_next_replica()
                self.send(('perform_operation', client_id, request_id, operation, client_process, order_statement, result, result_shuttle), to=next_replica)
            else:
                print('dont')
                result = self.process_operation(operation)
                order_proof = result_shuttle.get_order_proof_from_shuttle()
                print('order_proof')
                print(order_proof)
                order_proof.set_replica_id_in_order_proof(self._state.replica_id)
                order_statement = OrderStatement(self._state.current_slot_number, operation, self._state.replica_id)
                order_proof.add_order_statment(order_statement)
                self._state.history.add_order_proof_to_history(order_proof)
                result_proof = ResultProof(operation, self._state.replica_id, result)
                result_shuttle.add_result_proof_to_shuttle(result_proof)
                result_shuttle.add_order_statement_to_order_proof_in_shuttle(order_statement)
                print('here')
                if (self._state.is_tail_replica is True):
                    pass
                else:
                    print('inside here')
                    next_replica = self.get_next_replica()
                    self.send(('perform_operation', client_id, request_id, operation, client_process, order_statement, result, result_shuttle), to=next_replica)
    _Replica_handler_796._labels = None
    _Replica_handler_796._notlabels = None

    def _Replica_handler_1051(self, public_key, private_key):
        self._state.public_key = public_key
        self._state.private_key = private_key
        self.output('yo keys found')
        self.send(('KeysFound',), to=self._id)
    _Replica_handler_1051._labels = None
    _Replica_handler_1051._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_1 = []
        self._OlympusReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_1176, sources=[PatternExpr_1185], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1175]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_1226, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_1313, sources=[PatternExpr_1318], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_1312]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_1372, sources=[PatternExpr_1377], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, T, count, replica_set, **rest_2388):
        super().setup(T=T, count=count, replica_set=replica_set, **rest_2388)
        self._state.T = T
        self._state.count = count
        self._state.replica_set = replica_set
        self._state.client_info = {}
        self._state.replica_set = self._state.replica_set
        self._state.public_keys = []
        self._state.private_keys = []
        self.initConfiguration(self._state.T, self._state.replica_set)
        self.output('generating keys done at olympus')

    def run(self):
        self.output('inside olympus run')
        c = self.logical_clock()
        for i in range(0, ((2 * self._state.T) + 1)):
            self.send(('store_keys', self._state.public_keys[i], self._state.private_keys[i]), to=self._state.replica_set)
            pass
        super()._label('_st_label_1369', block=False)
        _st_label_1369 = 0
        while (_st_label_1369 == 0):
            _st_label_1369 += 1
            if PatternExpr_1380.match_iter(self._OlympusReceivedEvent_3, SELF_ID=self._id):
                _st_label_1369 += 1
            else:
                super()._label('_st_label_1369', block=True)
                _st_label_1369 -= 1

    def initConfiguration(self, T, replica_set):
        self._state.T = T
        for i in range(0, ((2 * T) + 1)):
            private_key = nacl.signing.SigningKey.generate()
            public_key = private_key.verify_key
            self._state.public_keys.append(public_key)
            self._state.private_keys.append(private_key)

    def _Olympus_handler_1175(self, public_key, client_id, client):
        super()._label('request', block=False)
        current_clock = self.logical_clock()
        self._state.client_info[client_id] = public_key
        self.output((('inside olympus ' + str(client_id)) + str(current_clock)))
        self.output(current_clock)
        super()._label('criticalsection', block=False)
        self.send(('add_client_at_replica', current_clock, public_key, client_id), to=self._state.replica_set)
        super()._label('_st_label_1217', block=False)
        new_clock = replica = None

        def UniversalOpExpr_1218():
            nonlocal new_clock, replica
            for replica in self._state.replica_set:

                def ExistentialOpExpr_1224():
                    nonlocal new_clock, replica
                    for (_, _, (_ConstantPattern1242_, new_clock, replica)) in self._OlympusReceivedEvent_1:
                        if (_ConstantPattern1242_ == 'client_registered_at_replica'):
                            if (new_clock == current_clock):
                                return True
                    return False
                if (not ExistentialOpExpr_1224()):
                    return False
            return True
        _st_label_1217 = 0
        while (_st_label_1217 == 0):
            _st_label_1217 += 1
            if UniversalOpExpr_1218():
                _st_label_1217 += 1
            else:
                super()._label('_st_label_1217', block=True)
                _st_label_1217 -= 1
        super()._label('release', block=False)
        self.output((('olympus done with this ' + str(client_id)) + str(client)))
        self.send(('client_registered_at_olympus',), to=client)
    _Olympus_handler_1175._labels = None
    _Olympus_handler_1175._notlabels = None

    def _Olympus_handler_1312(self, client):
        self.output(('inside get active configuration from olympus at olympus ' + str(client)))
        self.send(('received_active_configuration_at_client', self._state.replica_set), to=client)
    _Olympus_handler_1312._labels = None
    _Olympus_handler_1312._notlabels = None

def readFromConfig():
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_2 = []
        self._ClientReceivedEvent_3 = []
        self._ClientReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_1550, sources=[PatternExpr_1556], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1549]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_1634, sources=[PatternExpr_1639], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_1633]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_1672, sources=[PatternExpr_1677], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_1712, sources=[PatternExpr_1718], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_4', PatternExpr_1761, sources=[PatternExpr_1766], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, client_timer_expiry, **rest_2388):
        super().setup(client_id=client_id, olympus=olympus, client_timer_expiry=client_timer_expiry, **rest_2388)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.client_timer_expiry = client_timer_expiry
        self._state.olympus = self._state.olympus
        self._state.client_id = self._state.client_id
        self._state.request_id = 0
        self._state.private_key = None
        self._state.public_key = None
        self._state.head_replica = None
        self._state.tail_replica = None
        self._state.replica_set = []
        self.generateCryptoKeys()
        self._state.client_timer_expiry = self._state.client_timer_expiry

    def run(self):
        self.output(((('inside client run' + str(self._state.client_id)) + ' ---- ') + str(self._id)))
        self.send(('register_client_at_olympus', self._state.public_key, self._state.client_id), to=self._state.olympus)
        super()._label('_st_label_1669', block=False)
        olympus = None

        def ExistentialOpExpr_1670():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern1687_,)) in self._ClientReceivedEvent_2:
                if (_ConstantPattern1687_ == 'client_registered_at_olympus'):
                    if True:
                        return True
            return False
        _st_label_1669 = 0
        while (_st_label_1669 == 0):
            _st_label_1669 += 1
            if ExistentialOpExpr_1670():
                _st_label_1669 += 1
            else:
                super()._label('_st_label_1669', block=True)
                _st_label_1669 -= 1
        self.output(('inside client after registration ' + str(self._id)))
        self.send(('get_current_active_configuration_from_olympus',), to=self._state.olympus)
        self.output(('olympus address is ' + str(self._state.olympus)))
        super()._label('_st_label_1709', block=False)
        olympus = None

        def ExistentialOpExpr_1710():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern1728_, _)) in self._ClientReceivedEvent_3:
                if (_ConstantPattern1728_ == 'received_active_configuration_at_client'):
                    if True:
                        return True
            return False
        _st_label_1709 = 0
        while (_st_label_1709 == 0):
            _st_label_1709 += 1
            if ExistentialOpExpr_1710():
                _st_label_1709 += 1
            else:
                super()._label('_st_label_1709', block=True)
                _st_label_1709 -= 1
        self.output('performing operations')
        operations = self.getWorkLoad()
        for operation in operations:
            self.send(('perform_operation', self._state.client_id, self._state.request_id, operation, self._id, None, None, None), to=self._state.head_replica)
            super()._label('_st_label_1758', block=False)
            olympus = None

            def ExistentialOpExpr_1759():
                nonlocal olympus
                for (_, (_, _, self._state.olympus), (_ConstantPattern1776_,)) in self._ClientReceivedEvent_4:
                    if (_ConstantPattern1776_ == 'perform_operation'):
                        if True:
                            return True
                return False
            _st_label_1758 = 0
            while (_st_label_1758 == 0):
                _st_label_1758 += 1
                if ExistentialOpExpr_1759():
                    _st_label_1758 += 1
                else:
                    super()._label('_st_label_1758', block=True)
                    _st_label_1758 -= 1
            else:
                if (_st_label_1758 != 2):
                    continue
            if (_st_label_1758 != 2):
                break

    def generateCryptoKeys(self):
        self._state.private_key = nacl.signing.SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key

    def pseudorandom_workload_gen(self, seed, count):
        random.seed(seed)
        list_operations = ["put('movie','star')", "append('movie',' wars')", "get('movie')", "put('jedi','luke skywalker)", "slice('jedi','0:4'); get('jedi')"]
        list_random_operations = []
        for i in range(count):
            list_random_operations.append(list_operations[random.randint(0, (len(list_operations) - 1))])
        return '; '.join(list_random_operations)

    def getWorkLoad(self):
        config = {}
        with open('config.txt', 'r') as f:
            for line in f:
                if (not (line[0] == '#')):
                    (key, sep, val) = line.partition('=')
                    if (not (len(sep) == 0)):
                        val = val.strip()
                        config[key.strip()] = (int(val) if str.isdecimal(val) else val)
        workload = config.get((('workload[' + str(self._state.client_id)) + ']'))
        if ('pseudorandom' in workload):
            open_brace_index = workload.find('(')
            comma_index = workload.find(',')
            close_brace_index = workload.find(')')
            seed = int(workload[(open_brace_index + 1):comma_index].strip())
            count = int(workload[(comma_index + 1):close_brace_index].strip())
            workload = self.pseudorandom_workload_gen(seed, count)
        workload = workload.split(';')
        operations = []
        for i in range(0, len(workload)):
            item = workload[i].strip()
            print(item)
            operation_dict = {}
            if ('put' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur].strip()
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur].strip()
                operation_dict['operation'] = 'put'
                operation_dict['key'] = key
                operation_dict['value'] = value
            elif ('append' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur].strip()
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur].strip()
                operation_dict['operation'] = 'append'
                operation_dict['key'] = key
                operation_dict['value'] = value
            elif ('slice' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur].strip()
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur].strip()
                operation_dict['operation'] = 'slice'
                operation_dict['key'] = key
                slice_indices = value.split(':')
                operation_dict['value1'] = slice_indices[0].strip()
                operation_dict['value2'] = slice_indices[1].strip()
            elif ('get' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur].strip()
                operation_dict['operation'] = 'get'
                operation_dict['key'] = key
            operations.append(operation_dict)
        return operations

    def _Client_handler_1549(self, replica_set, olympus):
        self.output(('inside get current active config at client' + str(self._id)))
        self.output(((('olympus address is ' + str(olympus)) + ' at client ') + str(self._id)))
        print(replica_set)
        print(type(replica_set))
        count = 0
        for replica in replica_set:
            self._state.replica_set.append(replica)
            if (count == 0):
                self._state.head_replica = replica
            elif (count == (len(replica_set) - 1)):
                self._state.tail_replica = replica
            count = (count + 1)
            self.output('yo found my replicas at client')
    _Client_handler_1549._labels = None
    _Client_handler_1549._notlabels = None

    def _Client_handler_1633(self, olympus):
        self.output((str(self._state.client_id) + 'is successfully registered yoo '))
    _Client_handler_1633._labels = None
    _Client_handler_1633._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'Fifo', 'clock': 'Lamport'}

    def run(self):
        T = 1
        client_timer_expiry = 1
        total_replica_count = ((2 * T) + 10)
        replica_set = self.new(Replica, num=total_replica_count)
        olympus = self.new(Olympus, num=1)
        replica_id = 0
        for replica in replica_set:
            self._setup(replica, (replica_set, replica_id))
            replica_id = (replica_id + 1)
        self._setup(olympus, (T, total_replica_count, replica_set))
        self._start(olympus)
        self._start(replica_set)
        clients = self.new(Client, num=1)
        client_id = 0
        for new_client in clients:
            self._setup(new_client, (client_id, olympus, client_timer_expiry))
            client_id = (client_id + 1)
        self._start(clients)
