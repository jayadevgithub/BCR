# -*- generated by 1.0.9 -*-
import da
PatternExpr_295 = da.pat.TuplePattern([da.pat.ConstantPattern('add_client_at_replica'), da.pat.FreePattern('current_clock'), da.pat.FreePattern('public_key'), da.pat.FreePattern('client_id')])
PatternExpr_305 = da.pat.FreePattern('olympus')
PatternExpr_343 = da.pat.TuplePattern([da.pat.ConstantPattern('handle_request'), da.pat.FreePattern('client_id'), da.pat.FreePattern('request_id'), da.pat.FreePattern('operation')])
PatternExpr_374 = da.pat.TuplePattern([da.pat.ConstantPattern('store_keys'), da.pat.FreePattern('public_key'), da.pat.FreePattern('private_key')])
PatternExpr_402 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation'), da.pat.FreePattern('public_key'), da.pat.FreePattern('private_key')])
PatternExpr_433 = da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])
PatternExpr_438 = da.pat.SelfPattern()
PatternExpr_460 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_465 = da.pat.SelfPattern()
PatternExpr_441 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])])
PatternExpr_468 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_526 = da.pat.TuplePattern([da.pat.ConstantPattern('register_client_at_olympus'), da.pat.FreePattern('public_key'), da.pat.FreePattern('client_id')])
PatternExpr_535 = da.pat.FreePattern('client')
PatternExpr_576 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_replica'), da.pat.FreePattern('new_clock'), da.pat.FreePattern('replica')])
PatternExpr_618 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_623 = da.pat.FreePattern('client')
PatternExpr_674 = da.pat.TuplePattern([da.pat.ConstantPattern('get_current_active_configuration_from_olympus')])
PatternExpr_679 = da.pat.FreePattern('client')
PatternExpr_727 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_732 = da.pat.SelfPattern()
PatternExpr_735 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_905 = da.pat.TuplePattern([da.pat.ConstantPattern('get_current_active_configuration_from_olympus'), da.pat.FreePattern('replica_set')])
PatternExpr_911 = da.pat.FreePattern('olympus')
PatternExpr_952 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_957 = da.pat.FreePattern('olympus')
PatternExpr_990 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_olympus')])
PatternExpr_995 = da.pat.FreePattern('olympus')
PatternExpr_1034 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_1039 = da.pat.FreePattern('olympus')
_config_object = {}
import sys
import nacl.encoding
import nacl.signing
import nacl.hash
import uuid
from nacl.bindings.utils import sodium_memcmp

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_4 = []
        self._ReplicaReceivedEvent_5 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_295, sources=[PatternExpr_305], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_294]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_343, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_342]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_374, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_373]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_402, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_401]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_433, sources=[PatternExpr_438], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_5', PatternExpr_460, sources=[PatternExpr_465], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, replica_set, replica_id, **rest_1520):
        super().setup(replica_set=replica_set, replica_id=replica_id, **rest_1520)
        self._state.replica_set = replica_set
        self._state.replica_id = replica_id
        self._state.client_info = {}
        self._state.public_key = None
        self._state.private_key = None
        self._state.data_object = None
        self._state.replica_id = None
        self._state.mode = None
        self._state.result_cache = {}
        self._state.is_head_replica = False
        self._state.is_hail_replica = False
        self._state.replica_set = self._state.replica_set
        self._state.history = None
        self._state.current_slot_number = 0
        self._state.result_cache = {}
        if (self._state.replica_id == 1):
            isHead = True
        elif (self._state.replica_id == len(self._state.replica_set)):
            isTail = True

    def run(self):
        super()._label('_st_label_430', block=False)
        _st_label_430 = 0
        while (_st_label_430 == 0):
            _st_label_430 += 1
            if PatternExpr_441.match_iter(self._ReplicaReceivedEvent_4, SELF_ID=self._id):
                _st_label_430 += 1
            else:
                super()._label('_st_label_430', block=True)
                _st_label_430 -= 1
        self.output('my public_key is ')
        self.output('my private_key is ')
        super()._label('_st_label_457', block=False)
        _st_label_457 = 0
        while (_st_label_457 == 0):
            _st_label_457 += 1
            if PatternExpr_468.match_iter(self._ReplicaReceivedEvent_5, SELF_ID=self._id):
                _st_label_457 += 1
            else:
                super()._label('_st_label_457', block=True)
                _st_label_457 -= 1

    def is_registered_client(self, client_id):
        if (client_id in self._state.client_info):
            return True
        else:
            return False

    def check_in_result_cache(self):
        pass

    def _Replica_handler_294(self, current_clock, public_key, client_id, olympus):
        self.output(((((('adding client in replica clientinfo at ' + str(self._id)) + ' client id is ') + str(client_id)) + ' at clock ') + str(current_clock)))
        self._state.client_info[client_id] = public_key
        self.send(('client_registered_at_replica', current_clock, self._id), to=olympus)
    _Replica_handler_294._labels = None
    _Replica_handler_294._notlabels = None

    def _Replica_handler_342(self, client_id, request_id, operation):
        if (self.is_registered_client(client_id) is False):
            self.output('malicious client found')
        if (self._state.is_head_replica is True):
            self.check_in_result_cache(operation)
    _Replica_handler_342._labels = None
    _Replica_handler_342._notlabels = None

    def _Replica_handler_373(self, public_key, private_key):
        self._state.public_key = public_key
        self._state.private_key = private_key
        self.output('yo keys found')
        self.send(('KeysFound',), to=self._id)
    _Replica_handler_373._labels = None
    _Replica_handler_373._notlabels = None

    def _Replica_handler_401(self, public_key, private_key):
        self._state.public_key = public_key
        self._state.private_key = private_key
        self.output('yo keys found')
        self.send(('KeysFound',), to=self._id)
    _Replica_handler_401._labels = None
    _Replica_handler_401._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_1 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_526, sources=[PatternExpr_535], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_525]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_576, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_618, sources=[PatternExpr_623], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_617]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_674, sources=[PatternExpr_679], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_673]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_727, sources=[PatternExpr_732], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, T, count, replica_set, **rest_1520):
        super().setup(T=T, count=count, replica_set=replica_set, **rest_1520)
        self._state.T = T
        self._state.count = count
        self._state.replica_set = replica_set
        self._state.client_info = {}
        self._state.replica_set = self._state.replica_set
        self._state.public_keys = []
        self._state.private_keys = []
        self.initConfiguration(self._state.T, self._state.replica_set)
        self.output('generating keys done at olympus')

    def run(self):
        self.output('inside olympus run')
        c = self.logical_clock()
        for i in range(0, ((2 * self._state.T) + 1)):
            self.send(('store_keys', self._state.public_keys[i], self._state.private_keys[i]), to=self._state.replica_set)
            pass
        super()._label('_st_label_724', block=False)
        _st_label_724 = 0
        while (_st_label_724 == 0):
            _st_label_724 += 1
            if PatternExpr_735.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_724 += 1
            else:
                super()._label('_st_label_724', block=True)
                _st_label_724 -= 1

    def initConfiguration(self, T, replica_set):
        self._state.T = T
        for i in range(0, ((2 * T) + 1)):
            private_key = nacl.signing.SigningKey.generate()
            public_key = private_key.verify_key
            self._state.public_keys.append(public_key)
            self._state.private_keys.append(private_key)

    def _Olympus_handler_525(self, public_key, client_id, client):
        super()._label('request', block=False)
        current_clock = self.logical_clock()
        self._state.client_info[client_id] = public_key
        self.output((('inside olympus ' + str(client_id)) + str(current_clock)))
        self.output(current_clock)
        super()._label('criticalsection', block=False)
        self.send(('add_client_at_replica', current_clock, public_key, client_id), to=self._state.replica_set)
        super()._label('_st_label_567', block=False)
        replica = new_clock = None

        def UniversalOpExpr_568():
            nonlocal replica, new_clock
            for replica in self._state.replica_set:

                def ExistentialOpExpr_574():
                    nonlocal replica, new_clock
                    for (_, _, (_ConstantPattern592_, new_clock, replica)) in self._OlympusReceivedEvent_1:
                        if (_ConstantPattern592_ == 'client_registered_at_replica'):
                            if (new_clock == current_clock):
                                return True
                    return False
                if (not ExistentialOpExpr_574()):
                    return False
            return True
        _st_label_567 = 0
        while (_st_label_567 == 0):
            _st_label_567 += 1
            if UniversalOpExpr_568():
                _st_label_567 += 1
            else:
                super()._label('_st_label_567', block=True)
                _st_label_567 -= 1
        super()._label('release', block=False)
        self.output((('olympus done with this ' + str(client_id)) + str(client)))
        self.send(('client_registered_at_olympus',), to=client)
    _Olympus_handler_525._labels = None
    _Olympus_handler_525._notlabels = None

    def _Olympus_handler_617(self, client):
        pass
    _Olympus_handler_617._labels = None
    _Olympus_handler_617._notlabels = None

    def _Olympus_handler_673(self, client):
        self.send(('current_active_configuration', self._state.replica_set), to=client)
    _Olympus_handler_673._labels = None
    _Olympus_handler_673._notlabels = None

def readFromConfig():
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_2 = []
        self._ClientReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_905, sources=[PatternExpr_911], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_904]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_952, sources=[PatternExpr_957], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_951]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_990, sources=[PatternExpr_995], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_1034, sources=[PatternExpr_1039], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, client_id, olympus, client_timer_expiry, **rest_1520):
        super().setup(client_id=client_id, olympus=olympus, client_timer_expiry=client_timer_expiry, **rest_1520)
        self._state.client_id = client_id
        self._state.olympus = olympus
        self._state.client_timer_expiry = client_timer_expiry
        self._state.olympus = self._state.olympus
        self._state.client_id = self._state.client_id
        self._state.request_id = 0
        self._state.private_key = None
        self._state.public_key = None
        self._state.head_replica = None
        self._state.tail_replica = None
        self._state.replica_set = None
        self.generateCryptoKeys()
        self._state.client_timer_expiry = self._state.client_timer_expiry
        pass

    def run(self):
        self.output(((('inside client run' + str(self._state.client_id)) + ' ---- ') + str(self._id)))
        self.send(('register_client_at_olympus', self._state.public_key, self._state.client_id), to=self._state.olympus)
        super()._label('_st_label_987', block=False)
        olympus = None

        def ExistentialOpExpr_988():
            nonlocal olympus
            for (_, (_, _, self._state.olympus), (_ConstantPattern1005_,)) in self._ClientReceivedEvent_2:
                if (_ConstantPattern1005_ == 'client_registered_at_olympus'):
                    if True:
                        return True
            return False
        _st_label_987 = 0
        while (_st_label_987 == 0):
            _st_label_987 += 1
            if ExistentialOpExpr_988():
                _st_label_987 += 1
            else:
                super()._label('_st_label_987', block=True)
                _st_label_987 -= 1
        self.send(('get_current_active_configuration',), to=self._state.olympus)
        operations = {}
        for operation in operations:
            self.send(('perform_operation', self._state.client_id, self._state.request_id), to=self._state.head_replica)
            super()._label('_st_label_1031', block=False)
            olympus = None

            def ExistentialOpExpr_1032():
                nonlocal olympus
                for (_, (_, _, self._state.olympus), (_ConstantPattern1049_,)) in self._ClientReceivedEvent_3:
                    if (_ConstantPattern1049_ == 'perform_operation'):
                        if True:
                            return True
                return False
            _st_label_1031 = 0
            while (_st_label_1031 == 0):
                _st_label_1031 += 1
                if ExistentialOpExpr_1032():
                    _st_label_1031 += 1
                else:
                    super()._label('_st_label_1031', block=True)
                    _st_label_1031 -= 1
            else:
                if (_st_label_1031 != 2):
                    continue
            if (_st_label_1031 != 2):
                break

    def generateCryptoKeys(self):
        self._state.private_key = nacl.signing.SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key

    def getWorkLoad(self):
        config = {}
        with open('config.txt', 'r') as f:
            for line in f:
                if (not (line[0] == '#')):
                    (key, sep, val) = line.partition('=')
                    if (not (len(sep) == 0)):
                        val = val.strip()
                        config[key.strip()] = (int(val) if str.isdecimal(val) else val)
        workload = config.get((('workload[' + str((0 + 2))) + ']'))
        workload = workload.split(';')
        operations = []
        for i in range(0, len(workload)):
            item = workload[i]
            print(item)
            operation_dict = {}
            if ('put' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur]
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur]
                operation_dict['operation'] = 'put'
                operation_dict['key'] = key
                operation_dict['value'] = value
            elif ('append' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur]
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur]
                operation_dict['operation'] = 'append'
                operation_dict['key'] = key
                operation_dict['value'] = value
            elif ('slice' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur]
                first_occur = item.find("'", (second_occur + 1))
                second_occur = item.find("'", (first_occur + 1))
                value = item[(first_occur + 1):second_occur]
                operation_dict['operation'] = 'slice'
                operation_dict['key'] = key
                operation_dict['value'] = value
            elif ('get' in item):
                first_occur = item.find("'")
                second_occur = item.find("'", (first_occur + 1))
                key = item[(first_occur + 1):second_occur]
                operation_dict['operation'] = 'get'
                operation_dict['key'] = key
            operations.append(operation_dict)
        return operations

    def _Client_handler_904(self, replica_set, olympus):
        self._state.replica_set = replica_set
        count = 0
        for replica in replica_set:
            if (count == 0):
                self._state.head_replica = replica
            elif (count == (len(replica_set) - 1)):
                self._state.tail_replica = replica
    _Client_handler_904._labels = None
    _Client_handler_904._notlabels = None

    def _Client_handler_951(self, olympus):
        self.output((str(self._state.client_id) + 'is successfully registered yoo '))
    _Client_handler_951._labels = None
    _Client_handler_951._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])
    _config_object = {'channel': 'Fifo', 'clock': 'Lamport'}

    def run(self):
        T = 1
        client_timer_expiry = 1
        total_replica_count = ((2 * T) + 1)
        replica_set = self.new(Replica, num=total_replica_count)
        olympus = self.new(Olympus, num=1)
        replica_id = 0
        for replica in replica_set:
            replica_id = (replica_id + 1)
            self._setup(replica, (replica_set, replica_id))
        self._setup(olympus, (T, total_replica_count, replica_set))
        self._start(olympus)
        self._start(replica_set)
        clients = self.new(Client, num=2)
        client_id = 0
        for new_client in clients:
            self._setup(new_client, (client_id, olympus, client_timer_expiry))
            client_id = (client_id + 1)
        self._start(clients)
