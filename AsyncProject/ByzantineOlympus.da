
class Olympus(process):

    #def setup(T: int, count: int, replica_Set: set):
    def setup(T: int, count: int,config_file: string):

        self.Active = "Active"
        self.Immutable = "Immutable"
        self.config_file_name = config_file
        self.client_info = {}
        self.replica_set = {}
        self.public_keys = {}
        self.private_keys = {}
        self.count_of_registrations = {}
        self.count_of_wedged_statements = 0
        self.count_of_caughtup_messages = 0
        self.caughtup_messages_of_replicas = {}
        self.client_process_info = {}
        self.logger = logging.getLogger("Olympus:")
        self.logger.setLevel(logging.INFO)
        self.handler = logging.FileHandler(str(timestamp) + '_olympus.log')
        self.wedged_statements = {}
        self.handler.setLevel(logging.INFO)
        self.formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.handler.setFormatter(formatter)
        self.logger.addHandler(handler)
        self.T = T  # readFromConfig()
        self.has_received_running_state_from_random_replica = 0
        self.consistent_signed_hash_of_running_state = None
        self.current_running_state = None
        self.parent_process = None
        self.head_replica = None
        self.tail_replica = None
        #output('in setup olympus')
        self.total_replica_count = 2*T+1
        self.configuration_id = 0
        #self.configuration_status = self.Active
        setup_replicas()
        setup_parentprocess()

        #output('generating keys done at olympus')

    def setup_parentprocess():
        self.parent_process = new(ParentProcess, num=1)
        #parent_process = new(ParentProcess, num=1, at='ParentNode')
        setup(parent_process, (total_replica_count,))
        logger.info("Starting ParentProcess")
        start(parent_process)

    def reinitialize_setup_info_in_olympus():
        self.replica_set = {}
        self.public_keys = {}
        self.private_keys = {}
        self.count_of_registrations = {}
        self.count_of_wedged_statements = 0
        self.count_of_caughtup_messages = 0
        self.caughtup_messages_of_replicas = {}
        #self.client_process_info = {}
        self.wedged_statements = {}
        self.has_received_running_state_from_random_replica = 0
        self.consistent_signed_hash_of_running_state = None
        self.current_running_state = None
        self.head_replica = None
        self.tail_replica = None
        self.configuration_id = self.configuration_id + 1
        for client_id in client_info:
            self.count_of_registrations[client_id] = 0
   
    def setup_replicas():
        logger.info("setup_replicas:creating new replicas")
        replica_list = new(Replica, num=total_replica_count)
        #replica_set = new(Replica, num=total_replica_count, at='ReplicaNode')
        replica_id = 0
        for replica in replica_list:
            setup(replica, (T,replica_list, replica_id,config_file_name,configuration_id))
            self.replica_set[replica_id] = replica
            if replica_id == 0:
                self.head_replica = replica
            elif replica_id == len(replica_list) - 1:
                self.tail_replica = replica
            replica_id = replica_id + 1
        start(replica_list)
        logger.info("%s Replicas started", str(total_replica_count))
        print("replica_list "+str(replica_list))
        #generate_cryptographic_keys_for_replicas
        for replica_id in range(0, 2 * T + 1):
            key = nacl.utils.random(nacl.secret.SecretBox.KEY_SIZE)
            #print("key :"+str(key))
            naclObject = nacl.signing.SigningKey(key)
            private_key = naclObject.generate()
            public_key = private_key.verify_key
            public_keys[replica_id] = public_key
            private_keys[replica_id] = private_key

    def send_cryptographic_keys_to_replicas():
        for replica_id in range(0, 2 * T + 1):
            send(('store_keys', self.public_keys[replica_id], self.private_keys[replica_id], self.public_keys), to=replica_set[replica_id])
            logger.info("sent: 'store_keys' TO replica_id=%s", str(replica_id))

    def initialize_replicas_with_running_state(running_state):
        for replica_id in range(0, 2 * T + 1):
            send(('new_configuration', running_state), to=replica_set[replica_id])
            logger.info("sent: new_configuration. with 'running_state' TO replica_id=%s", str(replica_id))

    def register_clients_at_replica():
        for client_id in client_info:
            public_key = self.client_info[client_id]
            send(('add_client_at_replica', public_key, client_id), to=replica_set.values())
            logger.info("sent: 'add_client_at_replica'-client_id=%s, TO all the replicas", str(client_id))
            #self.count_of_registrations[client_id] = 3
            #print("len(replica_set) "+str(len(replica_set)) +" self.count_of_registrations[client_id] "+str(self.count_of_registrations[client_id]))            
            #print("registration done for client_id "+str(client_id))
    
    def receive(msg=('register_client_at_olympus', public_key, client_id), from_=client):
        logger.info("received: 'register_client_at_olympus' FROM client_id=%s", str(client_id))
        self.client_info[client_id] = public_key
        self.client_process_info[client_id] = client
        self.count_of_registrations[client_id] = 0

        send(('add_client_at_replica', public_key, client_id), to=replica_set.values())
        logger.info("sent: 'add_client_at_replica'-client_id=%s, TO all the replicas", str(client_id))
        await(self.count_of_registrations[client_id] == len(replica_set))
        send(('client_registered_at_olympus',parent_process), to=client)
        logger.info("sent: 'client_registered_at_olympus' TO client_id=%s", str(client_id))

    def receive(msg=('client_registered_at_replica', client_id,replica_id), from_=client):
        logger.info("client_registered_at_replica: client:%s,at the replica:%s", str(client_id),str(replica_id))
        
        self.count_of_registrations[client_id] = self.count_of_registrations[client_id] + 1
        #print("len(replica_set) "+str(len(replica_set)) +" self.count_of_registrations[client_id] "+str(self.count_of_registrations[client_id]))


    def decode_hash_and_verify(hash_digest, signed_message, public_key):
        #print("inside decode_hash_and_verify")
        try:
            new_digest = public_key.verify(signed_message)
            #print("hash_digest "+str(hash_digest))
            #print("new_digest "+str(new_digest))
            if sodium_memcmp(hash_digest, new_digest):
                return True
            else:
                return False
        except:
            logger.error(
                "nacl.exceptions.BadSignatureError: Signature was forged or corrupt.")
            #print("verification 1 failed")

        return False

    def match_hash_with_max_replica(replica_signed_hash, replica_public_key, head_signed_hash, head_public_key):
        #print("inside match_hash_with_max_replica")
        try:
            replica_msg_digest = replica_public_key.verify(replica_signed_hash)
            head_msg_digest = head_public_key.verify(head_signed_hash)

            #print("replica_msg_digest "+str(replica_msg_digest) )
            #print("head_msg_digest "+str(head_msg_digest) )
            if sodium_memcmp(replica_msg_digest, head_msg_digest):
                return True
            else:
                return False
        except:
            logger.error(
                "nacl.exceptions.BadSignatureError: Signature was forged or corrupt")
            #print("verification 2 failed")

        return False

    def get_max_checkpoint_value(checkpoint_indices):
        max_val = checkpoint_indices[0]
        for i in range(0,len(checkpoint_indices)):
            max_val = get_max(max_val,checkpoint_indices[i])
        return max_val





    def get_the_slot_to_start_catchup_process():
        #first iterate the completed check point proofs and the find the slot_id
        #to start comparing from
        checkpoint_indices = []
        rep_indices = []
        #
        for replica_index in self.wedged_statements:
            replica_wedged_statement = wedged_statements[replica_index]
            rep_indices.append(replica_index)
            #wedged_replica_indices.append(replica_index)
            if replica_wedged_statement.get_last_check_point_proof() is None:
                checkpoint_indices.append(-1)
            else:
                replica_checkpoint_id = replica_wedged_statement.get_checkpoint_id()
                checkpoint_indices.append(replica_checkpoint_id)

            
        max_checkpt_value = get_max_checkpoint_value(checkpoint_indices)

        while max_checkpt_value > 0:

            if max_checkpt_value == -1:
                return None

            wedged_replica_indices = []
            for rep_index in range(0,len(checkpoint_indices)):
                if checkpoint_indices[rep_index] == max_checkpt_value: 
                    wedged_replica_indices.append(rep_indices[rep_index])
                    checkpoint_indices[rep_index] = -1

            logger.info("wedged_replica_indices  "+str(wedged_replica_indices))

            for replica_index in wedged_replica_indices:
                logger.info("wedged_statements  "+str(wedged_statements))
                replica_wedged_statement = wedged_statements[replica_index]
                logger.info("wedged_statements "+str(wedged_statements))            
                checkpoint_proof = replica_wedged_statement.get_last_check_point_proof()
                count_of_replicas_in_check_point_proof = checkpoint_proof.get_count_of_replicas_with_checkpoint()
                logger.info("count_of_replicas_in_check_point_proof "+str(count_of_replicas_in_check_point_proof))
                if count_of_replicas_in_check_point_proof < self.T + 1 :
                    logger.error("Invalid checkpoint proof,checkpoint proof is not complete,missing replica proofs")
                    continue
                
                replica_list = list(checkpoint_proof.get_replicas_in_checkpoint())
                logger.info(" replicas in the checkpoint proof "+str(replica_list))
                prev_replica_id  = None
                is_a_valid_check_point_proof = True
                for rep_id in replica_list:
                    logger.info("iterating checkpoint-Proof "+str(rep_id))
                    if prev_replica_id is None:
                        prev_replica_id = rep_id
                        continue
                    
                    hash_of_running_state_prev_replica = checkpoint_proof.get_hash_of_running_state_of_replica(prev_replica_id) 
                    signed_hash_of_running_state_prev_replica = checkpoint_proof.get_signed_hash_of_running_state_of_replica(prev_replica_id)
                    public_key_of_prev_replica = self.public_keys[prev_replica_id]

                    hash_of_running_state_current_replica = checkpoint_proof.get_hash_of_running_state_of_replica(rep_id)
                    signed_hash_of_running_state_current_replica = checkpoint_proof.get_signed_hash_of_running_state_of_replica(rep_id)
                    public_key_of_current_replica = self.public_keys[rep_id]

                    if decode_hash_and_verify(hash_of_running_state_prev_replica,signed_hash_of_running_state_prev_replica,public_key_of_prev_replica) is False or match_hash_with_max_replica(signed_hash_of_running_state_prev_replica,public_key_of_prev_replica,signed_hash_of_running_state_current_replica,public_key_of_current_replica) is False:
                        is_a_valid_check_point_proof = False
                        break
                
                if is_a_valid_check_point_proof is True:
                    logger.info("replica_index is "+ str(replica_index)+"is_a_valid_check_point_proof:"+str(is_a_valid_check_point_proof)+" terminal slot id is "+str(checkpoint_proof.get_check_point_terminal_slot_id()))
                    return checkpoint_proof.get_check_point_terminal_slot_id()

            max_checkpt_value = get_max_checkpoint_value(checkpoint_indices)


    def get_maximal_order_proof_replica_index(faulty_replica_indices):
        logger.info("get_maximal_order_proof_replica_index: "+str(self.wedged_statements))
        max_slot_id = -1
        max_order_proof_replica_index = None

        for replica_index in self.wedged_statements:
            if replica_index in faulty_replica_indices:
                continue
            replica_wedged_statement = wedged_statements[replica_index]
            replica_history = replica_wedged_statement.get_history_from_wedged_statement()
            max_slot_num_at_replica = replica_history.get_maximum_slot_id()
            if max_slot_num_at_replica is not None and max_slot_id < max_slot_num_at_replica:
                max_slot_id = max_slot_num_at_replica
                max_order_proof_replica_index = replica_index

        logger.info("returning get_maximal_order_proof_replica_index:")
        return max_order_proof_replica_index

    def print_catchup_messages(catup_msgs):
        logger.info("inside print_catchup_messages \n\n")
        for replica_id in catup_msgs:
            catup_msg = catup_msgs[replica_id]
            for slot_ide in catup_msg.get_slot_ids():
                logger.info("replica_id "+str(replica_id) +" slot_ide "+str(slot_ide))
        logger.info("outside print_catchup_messages \n\n")

    def get_combinations(max_rep_id):
        available_replicas = list(self.wedged_statements.keys())
        available_replicas.remove(max_rep_id)
        combinations = []
        for comb in itertools.combinations(available_replicas, T):
            combinations.append(list(comb))
        return combinations



    def get_valid_quorum_of_replicas(max_order_proof_replica_index,slot_id_to_start_from,quorum_of_replicas):
        logger.info("get_valid_quorum_of_replicas: T Replicas: "+str(quorum_of_replicas) +" max_order_proof_replica_index "+str(max_order_proof_replica_index))
        valid_quorum_of_replicas = []
        valid_quorum_of_replicas.append(max_order_proof_replica_index)
        catchup_messages = {}
        catchup_messages[max_order_proof_replica_index] = CatchupMessage()
        max_wedged_statement = wedged_statements[max_order_proof_replica_index]
        max_replica_public_key = self.public_keys[max_order_proof_replica_index]
        max_count_of_slots  = max_wedged_statement.get_maximum_slot_id()
        logger.info("get_valid_quorum_of_replicas: max  replica_index is  "+str(max_order_proof_replica_index)+" with max slots "+str(max_count_of_slots)+" and slot cache is "+str(max_wedged_statement.get_history_from_wedged_statement().get_slots()))
        for replica_index in quorum_of_replicas:
            logger.info("get_valid_quorum_of_replicas:comparing with replica_index "+str(replica_index))
            if replica_index == max_order_proof_replica_index: 
                pass
            else:
                current_wedged_statement = wedged_statements[replica_index]
                curr_order_proofs_size = current_wedged_statement.get_maximum_slot_id()
                curr_replica_public_key = self.public_keys[replica_index]
                is_a_quorum_replica = True
                logger.info("get_valid_quorum_of_replicas:inside comparing"+str(max_order_proof_replica_index)+" with  replica_index "+str(replica_index)+" in the range of slots "+str(slot_id_to_start_from)+" to "+str(curr_order_proofs_size) +" actual slot cache is "+str(wedged_statements[replica_index].get_history_from_wedged_statement().get_slots()))

                for slot_id in range(slot_id_to_start_from,curr_order_proofs_size):
                    logger.info("get_valid_quorum_of_replicas:checking at slot_id "+str(slot_id))
                    curr_order_proof = current_wedged_statement.get_order_proof_at_slot(slot_id)
                    if curr_order_proof is None:
                        logger.info("get_valid_quorum_of_replicas:no order proof in replica_id "+str(replica_index)+" at slot_id "+str(slot_id))
                        is_a_quorum_replica = False
                        break
                    max_order_proof = max_wedged_statement.get_order_proof_at_slot(slot_id)

                    curr_order_stmt = curr_order_proof.get_order_statement_of_replica(replica_index)
                    max_order_stmt = max_order_proof.get_order_statement_of_replica(max_order_proof_replica_index)

                    curr_hash_of_order_stmt = curr_order_stmt.get_hash_of_order_statement()
                    curr_signed_hash_of_order_stmt = curr_order_stmt.get_signed_hash_of_order_statement()

                    max_hash_of_order_stmt = max_order_stmt.get_hash_of_order_statement()
                    max_signed_hash_of_order_stmt = max_order_stmt.get_signed_hash_of_order_statement()

                    if decode_hash_and_verify(curr_hash_of_order_stmt,curr_signed_hash_of_order_stmt,curr_replica_public_key) is False or match_hash_with_max_replica(curr_signed_hash_of_order_stmt,curr_replica_public_key,max_signed_hash_of_order_stmt,max_replica_public_key) is False:
                        logger.info("get_valid_quorum_of_replicas: no order proof in replica_id "+str(replica_index)+" at slot_id "+str(slot_id))
                        logger.info("get_valid_quorum_of_replicas: curr_hash_of_order_stmt "+str(curr_hash_of_order_stmt))
                        logger.info("get_valid_quorum_of_replicas: max_hash_of_order_stmt "+str(max_hash_of_order_stmt))
                        is_a_quorum_replica = False
                        break

                if is_a_quorum_replica is True:
                    valid_quorum_of_replicas.append(replica_index)
                    catchup_length = max_count_of_slots - curr_order_proofs_size
                    catchup_message = CatchupMessage()
                    logger.info("get_valid_quorum_of_replicas:inside comparing"+str(max_order_proof_replica_index)+" with  replica_index "+str(replica_index)+" with catchup length"+str(catchup_length))

                    logger.info("get_valid_quorum_of_replicas:get_order_proof_at_slot "+str(max_wedged_statement.get_history_from_wedged_statement().get_slots()))
                    if catchup_length > 0:
                        for slot_id in range(curr_order_proofs_size+1,max_count_of_slots+1):
                            logger.info("get_valid_quorum_of_replicas:get_order_proof_at_slot "+str(slot_id))                            
                            max_order_proof = max_wedged_statement.get_order_proof_at_slot(slot_id)
                            catchup_order_stmt = max_order_proof.get_order_statement_of_replica(max_order_proof_replica_index)
                            catchup_stmt = CatchupStatement(catchup_order_stmt)
                            catchup_message.add_order_statement(slot_id,catchup_stmt)
                    catchup_messages[replica_index] = catchup_message

                if len(valid_quorum_of_replicas) == T + 1:
                    return (valid_quorum_of_replicas,catchup_messages)

        return (valid_quorum_of_replicas,catchup_messages)

    def check_ordering_of_slots(max_wedged_statement_slots):
        prev_slot = None
        for i in range(0,len(max_wedged_statement_slots)):
            if prev_slot is None:
                prev_slot = max_wedged_statement_slots[i]
            elif prev_slot + 1 != max_wedged_statement_slots[i]:
                return False
            else:
                prev_slot = max_wedged_statement_slots[i]
        return True

    def find_quorum_of_replicas():
        #print("find_quorum_of_replicas:called "+str(len(self.wedged_statements)) +" T "+str(T))
        while len(self.wedged_statements) > T:
            logger.info("inside find_quorum_of_replicas")
            checkpoint_terminal_slot_id =get_the_slot_to_start_catchup_process()
            logger.info("***checkpoint_terminal_slot_id " +str(checkpoint_terminal_slot_id))
            if checkpoint_terminal_slot_id is not None:
                next_slot_id = checkpoint_terminal_slot_id + 1
            else:
                next_slot_id = 0
            valid_quorum_of_replicas = []
            
            faulty_replica_indices = []
            catchup_messages = None
            max_order_proof_replica_index = None
            #print("getting  max_order_proof replica index")
            while True:
                max_order_proof_replica_index = get_maximal_order_proof_replica_index(faulty_replica_indices)
                if max_order_proof_replica_index is None:
                    logger.error("find_quorum_of_replicas:Quorum of T+1 valid replicas doesnot exist")
                    break

                max_wedged_statement_slots = wedged_statements[max_order_proof_replica_index].get_history_from_wedged_statement().get_slots()
                if check_ordering_of_slots(max_wedged_statement_slots) is False:
                    del self.wedged_statements[max_order_proof_replica_index]
                    faulty_replica_indices.append(max_order_proof_replica_index)
                    continue
                    
                quorums_of_replicas =  get_combinations(max_order_proof_replica_index)
                logger.info("find_quorum_of_replicas: getting combinations max_order_proof replica index "+str(max_order_proof_replica_index)+" quorums_of_replicas "+str(quorums_of_replicas))
                for i in range(0,len(quorums_of_replicas)):
                    quorum_of_replicas = quorums_of_replicas[i]
                    (valid_quorum_of_replicas,catchup_messages) = get_valid_quorum_of_replicas(max_order_proof_replica_index,next_slot_id,quorum_of_replicas)
                
                    catchup_msg_identifier = 0
                    for rep_id in valid_quorum_of_replicas:
                        logger.info("find_quorum_of_replicas:getting catchup messages from replica_id:"+str(rep_id))
                        #replica_id = valid_quorum_of_replicas[i]
                        if catchup_messages is not None:
                            catchup_message = catchup_messages[rep_id]
                        else:
                            logger.info("find_quorum_of_replicas : catchup_message is None "+str(catchup_messages))
                        replica_to = replica_set[rep_id]
                        logger.info("find_quorum_of_replicas:sending perform_catchup_to_maximal_order_proof")
                        send(('perform_catchup_to_maximal_order_proof',catchup_message,catchup_msg_identifier),to = replica_to)

                    await(self.count_of_caughtup_messages == len(valid_quorum_of_replicas))
                    if validate_runningstate_in_caughtup_messages() is True:
                        logger.info("find_quorum_of_replicas:Validation Successful,Quorum of T+1 valid replicas found")
                        #self.configuration_status = self.Immutable
                        #now send caughtup message request to some random replica id

                        quorum_of_replicas = copy.deepcopy(valid_quorum_of_replicas)

                        valid_running_state = None
                        running_state_id = 0
                        while len(quorum_of_replicas) > 0:
                            random_replica_index = randint(0,len(quorum_of_replicas)-1)
                            replica_id = quorum_of_replicas[random_replica_index]
                            
                            send(('get_running_state',running_state_id),to = replica_set[replica_id])
                            self.has_received_running_state_from_random_replica = 0
                            await(self.has_received_running_state_from_random_replica == 1)
                            caughtup_message = caughtup_messages_of_replicas[replica_id]
                            del quorum_of_replicas[random_replica_index]

                            replica_running_state = self.current_running_state
                            replica_signed_hash_of_running_state = get_signed_hash(replica_running_state,self.private_keys[replica_id])
                            if compare_signed_messages(replica_signed_hash_of_running_state,consistent_signed_hash_of_running_state) is True:
                                valid_running_state = replica_running_state
                                break
                            #running_state_id = running_state_id + 1
                        if valid_running_state is None:
                            logger.info("running_states are not consistent,need to do abort the system")
                        else:
                            send(('terminate_replica',),to =replica_set.values())
                            #perform_reconfiguration(running_state)
                            logger.info("performing reconfiguration with valid running_state "+str(valid_running_state))
                            perform_reconfiguration(valid_running_state)  
                            return              
                    else:
                        logger.info("validate_runningstate_in_caughtup_messages failed")
                        self.count_of_caughtup_messages = 0
                        self.caughtup_messages_of_replicas = {}

                del self.wedged_statements[max_order_proof_replica_index]
                
                #print_catchup_messages(catchup_messages)

                #print("here 1 "+str(valid_quorum_of_replicas))
                if len(valid_quorum_of_replicas) == T + 1:
                    logger.info("find_quorum_of_replicas:find_quorum_of_replicas:T+1 replicas found ")
                    break
                #print("here 2")
                faulty_replica_indices.append(max_order_proof_replica_index)

            if max_order_proof_replica_index is None:
                logger.info("find_quorum_of_replicas:Quorum of T+1 valid replicas doesnot exist need to terminate")
                #need to abort or exit todo
            

            logger.info("find_quorum_of_replicas:Valid Quorum of replicas found "+str(valid_quorum_of_replicas))


    def receive(msg=('reconfigure_request', replica_id), from_=process_cli_replica):
        print("inside olympus reconfigure_request")
        logger.warning("reconfigure_request: received reconfig request FROM replica_id=%s", str(replica_id))

        logger.info("wedged_request: sending wedged requests to all the replicas")
        self.count_of_wedged_statements = 0
        wedge_request_id = 0
        send(('wedged_request',wedge_request_id), to=replica_set.values())
        # we may need to change the condition if crash failure is encountered
        time.sleep(1)
        await(self.count_of_wedged_statements > self.T)
        find_quorum_of_replicas()

    def perform_reconfiguration(running_state):
        client_process_info_temp = copy.deepcopy(self.client_process_info)
        caughtup_messages_of_replicas_temp = copy.deepcopy(self.caughtup_messages_of_replicas)
        reinitialize_setup_info_in_olympus()
        setup_replicas()
        send_cryptographic_keys_to_replicas()
        initialize_replicas_with_running_state(running_state)
        # work()
        # work()
        # work()
        # work()
        # work()
        # work()
        # work()
        # work()
        # work()
        register_clients_at_replica()
        logger.info("perform_reconfiguration:clients registration done")
        for client_id in client_process_info_temp:
            shuttle = ResultShuttle()
            print("client_id "+str(client_id))
            for replica_id in caughtup_messages_of_replicas_temp:
               # print("parsing caughtup_message at client-id: "+str(client_id)+" at replica_id "+str(replica_id))
                caughtup_message = caughtup_messages_of_replicas_temp[replica_id]
                #print("after client_id 2: "+str(client_id))
                result_statement = caughtup_message.get_last_result_statement_of_client_at_replica(client_id)
                #print("after client_id 3: "+str(client_id))
                shuttle.add_result_proof_at_replica_id(replica_id,result_statement)
                #print("after client_id 4: "+str(client_id))
            #print("after client_id "+str(client_id))
            client_process = client_process_info_temp[client_id]
            await(self.count_of_registrations[client_id] == len(replica_set))
            send(('last_served_request',shuttle),to=client_process)

        logger.info("perform_reconfiguration:before configuration_status ")

        #self.configuration_status = self.Active
        #print("after configuration_status "+str(self.configuration_status))

    def validate_runningstate_in_caughtup_messages():
        logger.info("validate_runningstate_in_caughtup_messages:")
        prev_replica_hash_of_running_state = None
        prev_replica_signed_hash_of_running_state = None
        prev_replica_public_key = None

        for replica_id in caughtup_messages_of_replicas:
            caughtup_message = caughtup_messages_of_replicas[replica_id]
            replica_hash_of_running_state = caughtup_message.get_hash_of_running_state()
            replica_running_state = caughtup_message.get_running_state()
            logger.info("validate_runningstate_in_caughtup_messages: replica_id: "+str(replica_id)+" hash of running_state "+str(replica_hash_of_running_state)+" running_state "+str(replica_running_state))

        for replica_id in caughtup_messages_of_replicas:
            
            caughtup_message = caughtup_messages_of_replicas[replica_id]
            
            if prev_replica_hash_of_running_state is None:
                prev_replica_hash_of_running_state = caughtup_message.get_hash_of_running_state()
                prev_replica_signed_hash_of_running_state = caughtup_message.get_signed_hash_of_running_state()
                prev_replica_public_key = self.public_keys[replica_id]
                if decode_hash_and_verify(prev_replica_hash_of_running_state,prev_replica_signed_hash_of_running_state,prev_replica_public_key) is False:
                    logger.info("validate_runningstate_in_caughtup_messages:caughtup_messages signature mismatch")
                    return False
                continue

            curr_replica_hash_of_running_state = caughtup_message.get_hash_of_running_state()
            curr_replica_signed_hash_of_running_state = caughtup_message.get_signed_hash_of_running_state()
            curr_replica_public_key = self.public_keys[replica_id]

            if decode_hash_and_verify(curr_replica_hash_of_running_state,curr_replica_signed_hash_of_running_state,curr_replica_public_key) is False or match_hash_with_max_replica(curr_replica_signed_hash_of_running_state,curr_replica_public_key,prev_replica_signed_hash_of_running_state,prev_replica_public_key) is False:
                #todo find another quorum of replicas
                logger.info("validate_runningstate_in_caughtup_messages:prev_replica_hash_of_running_state "+str(prev_replica_hash_of_running_state))
                logger.info("validate_runningstate_in_caughtup_messages:curr_replica_hash_of_running_state "+str(curr_replica_hash_of_running_state))
                logger.info("validate_runningstate_in_caughtup_messages:caughtup_messages mismatch")
                return False
            else:
                prev_replica_hash_of_running_state = curr_replica_hash_of_running_state
                prev_replica_signed_hash_of_running_state = curr_replica_signed_hash_of_running_state 
                prev_replica_public_key = curr_replica_public_key

        self.consistent_signed_hash_of_running_state = prev_replica_signed_hash_of_running_state
        return True

    def receive(msg=('running_state_from_replica', replica_id,running_state), from_=client):
        self.current_running_state = running_state
        self.has_received_running_state_from_random_replica = 1

    def receive(msg=('caughtup_message', replica_id,caughtup_message), from_=client):
        self.count_of_caughtup_messages = self.count_of_caughtup_messages + 1
        self.caughtup_messages_of_replicas[replica_id] = caughtup_message

    def receive(msg=('wedged_statement_from_replica', wedged_statement,replica_id), from_=client):
        logger.info("received: 'wedged_statement_from_replica' FROM replica_id=%s", str(replica_id))
        self.count_of_wedged_statements = self.count_of_wedged_statements + 1
        self.wedged_statements[replica_id] = wedged_statement

    def receive(msg=('get_current_active_configuration_from_olympus',client_id), from_=client):
        logger.info("received: 'get_current_active_configuration_from_olympus' FROM client_id=%s", str(client))
        

        #await(self.configuration_status == self.Active)
        
        #output("inside get active configuration from olympus at olympus " + str(client))
        send(('received_active_configuration_at_client',replica_set, public_keys), to=client)
        logger.info(
            "sent: 'received_active_configuration_at_client' TO client_id=%s", str(client))

    def run():
        #output("inside olympus run")
        c = logical_clock()
        send_cryptographic_keys_to_replicas()
        await(received(('done',), from_=self))
