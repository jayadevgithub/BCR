
class Olympus(process):

    def setup(T: int, count: int, replica_Set: set):
        self.client_info = {}
        self.replica_set = []
        self.public_keys = []
        self.private_keys = []
        self.count_of_registrations = {}
        self.logger = logging.getLogger("Olumpus:")
        self.logger.setLevel(logging.INFO)
        self.handler = logging.FileHandler(str(timestamp) + '_olympus.log')
        self.handler.setLevel(logging.INFO)
        self.formatter = logging.Formatter(
            '%(asctime)s - %(name)s - %(levelname)s - %(message)s')
        self.handler.setFormatter(formatter)
        self.logger.addHandler(handler)

        count = 0
        for replica in replica_Set:
            self.replica_set.append(replica)
            if count == 0:
                self.head_replica = replica
            elif count == len(replica_Set) - 1:
                self.tail_replica = replica
            count = count + 1

        #output('in setup olympus')
        initConfiguration(T, replica_set)

        #output('generating keys done at olympus')

    def receive(msg=('register_client_at_olympus', public_key, client_id), from_=client):
        logger.info(
            "received: 'register_client_at_olympus' FROM client_id=%s", str(client_id))
        #--request
        #current_clock = logical_clock()
        self.client_info[client_id] = public_key
        self.count_of_registrations[client_id] = 0
        #output('inside olympus ' + str(client_id) + str(current_clock))
        # output(current_clock)
        #--criticalsection
        send(('add_client_at_replica', public_key, client_id), to=replica_set)
        logger.info(
            "sent: 'add_client_at_replica'-client_id=%s, TO all the replicas", str(client_id))
        # await(each(replica in replica_set,
        # 		   has=some(
        # 			   received(
        # 				   ('client_registered_at_replica', new_clock, replica)),
        # 			   has=(new_clock == current_clock)
        # 		   )
        # 		   )  # outer each
        # 	  )  # await
        #--release
        #output('olympus done with this ' + str(client_id) + str(client))
        await(self.count_of_registrations[client_id] == len(replica_set))
        send(('client_registered_at_olympus',), to=client)
        logger.info(
            "sent: 'client_registered_at_olympus' TO client_id=%s", str(client_id))
    # def receive(msg=('client_added',),from_)

    def initConfiguration(T, replica_set):
        #		HASHER = nacl.hash.sha256
        self.T = T  # readFromConfig()
        for i in range(0, 2 * T + 1):
            key = nacl.utils.random(nacl.secret.SecretBox.KEY_SIZE)
            #print("key :"+str(key))
            naclObject = nacl.signing.SigningKey(key)
            private_key = naclObject.generate()
            public_key = private_key.verify_key
            public_keys.append(public_key)
            private_keys.append(private_key)

    def receive(msg=('client_registered_at_replica', client_id), from_=client):
        self.count_of_registrations[client_id] = self.count_of_registrations[client_id] + 1

    def receive(msg=('get_current_active_configuration_from_olympus',), from_=client):
        logger.info(
            "received: 'get_current_active_configuration_from_olympus' FROM client_id=%s", str(client))
        #output("inside get active configuration from olympus at olympus " + str(client))
        send(('received_active_configuration_at_client',
              replica_set, public_keys), to=client)
        logger.info(
            "sent: 'received_active_configuration_at_client' TO client_id=%s", str(client))

    def run():
        #output("inside olympus run")
        c = logical_clock()
        for i in range(0, 2 * T + 1):
            send(
                ('store_keys', self.public_keys[i], self.private_keys[i], self.public_keys), to=replica_set[i])
            logger.info("sent: 'store_keys' TO replica_id=%s", str(i))
        await(received(('done',), from_=self))
