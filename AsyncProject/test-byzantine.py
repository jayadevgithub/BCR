# -*- generated by 1.0.9 -*-
import da
PatternExpr_295 = da.pat.TuplePattern([da.pat.ConstantPattern('add_new_client'), da.pat.FreePattern('current_clock'), da.pat.FreePattern('client_id'), da.pat.FreePattern('public_key')])
PatternExpr_305 = da.pat.FreePattern('olympus')
PatternExpr_327 = da.pat.TuplePattern([da.pat.ConstantPattern('handle_request'), da.pat.FreePattern('client_id'), da.pat.FreePattern('request_id'), da.pat.FreePattern('operation')])
PatternExpr_358 = da.pat.TuplePattern([da.pat.ConstantPattern('store_keys'), da.pat.FreePattern('public_key'), da.pat.FreePattern('private_key')])
PatternExpr_389 = da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])
PatternExpr_394 = da.pat.SelfPattern()
PatternExpr_416 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_421 = da.pat.SelfPattern()
PatternExpr_397 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])])
PatternExpr_424 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_482 = da.pat.TuplePattern([da.pat.ConstantPattern('register_client'), da.pat.FreePattern('public_key'), da.pat.FreePattern('client_id')])
PatternExpr_491 = da.pat.FreePattern('client')
PatternExpr_520 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_replica'), da.pat.BoundPattern('_BoundPattern523_'), da.pat.BoundPattern('_BoundPattern524_')])
PatternExpr_547 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_552 = da.pat.FreePattern('client')
PatternExpr_603 = da.pat.TuplePattern([da.pat.ConstantPattern('current_active_configuration')])
PatternExpr_608 = da.pat.FreePattern('client')
PatternExpr_656 = da.pat.TuplePattern([da.pat.ConstantPattern('done')])
PatternExpr_661 = da.pat.SelfPattern()
PatternExpr_664 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('done')])])
PatternExpr_527 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.FreePattern(None)]), da.pat.TuplePattern([da.pat.ConstantPattern('client_registered_at_replica'), da.pat.BoundPattern('_BoundPattern537_'), da.pat.BoundPattern('_BoundPattern538_')])])
PatternExpr_834 = da.pat.TuplePattern([da.pat.ConstantPattern('current_active_configuration'), da.pat.FreePattern('replica_set')])
PatternExpr_840 = da.pat.FreePattern('olympus')
PatternExpr_881 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered')])
PatternExpr_886 = da.pat.FreePattern('olympus')
PatternExpr_909 = da.pat.TuplePattern([da.pat.ConstantPattern('client_registered')])
PatternExpr_914 = da.pat.BoundPattern('_BoundPattern915_')
PatternExpr_946 = da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])
PatternExpr_951 = da.pat.BoundPattern('_BoundPattern952_')
PatternExpr_916 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern922_')]), da.pat.TuplePattern([da.pat.ConstantPattern('client_registered')])])
PatternExpr_953 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.BoundPattern('_BoundPattern959_')]), da.pat.TuplePattern([da.pat.ConstantPattern('perform_operation')])])
_config_object = {}
import sys
import nacl.encoding
import nacl.signing
import nacl.hash
import uuid
from nacl.bindings.utils import sodium_memcmp

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_3 = []
        self._ReplicaReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_295, sources=[PatternExpr_305], destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_294]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_327, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_326]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_2', PatternExpr_358, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_357]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_3', PatternExpr_389, sources=[PatternExpr_394], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_4', PatternExpr_416, sources=[PatternExpr_421], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, replica_set, replica_id, **rest_1049):
        super().setup(replica_set=replica_set, replica_id=replica_id, **rest_1049)
        self._state.replica_set = replica_set
        self._state.replica_id = replica_id
        self._state.client_info = {}
        self._state.public_key = None
        self._state.private_key = None
        self._state.data_object = None
        self._state.replica_id = None
        self._state.mode = None
        self._state.result_cache = {}
        self._state.is_head_replica = False
        self._state.is_hail_replica = False
        self._state.replica_set = self._state.replica_set
        self._state.history = None
        self._state.current_slot_number = 0
        self._state.result_cache = {}
        if (self._state.replica_id == 1):
            isHead = True
        elif (self._state.replica_id == len(self._state.replica_set)):
            isTail = True

    def run(self):
        super()._label('_st_label_386', block=False)
        _st_label_386 = 0
        while (_st_label_386 == 0):
            _st_label_386 += 1
            if PatternExpr_397.match_iter(self._ReplicaReceivedEvent_3, SELF_ID=self._id):
                _st_label_386 += 1
            else:
                super()._label('_st_label_386', block=True)
                _st_label_386 -= 1
        self.output('my public_key is ')
        self.output('my private_key is ')
        super()._label('_st_label_413', block=False)
        _st_label_413 = 0
        while (_st_label_413 == 0):
            _st_label_413 += 1
            if PatternExpr_424.match_iter(self._ReplicaReceivedEvent_4, SELF_ID=self._id):
                _st_label_413 += 1
            else:
                super()._label('_st_label_413', block=True)
                _st_label_413 -= 1

    def is_registered_client(self, client_id):
        if (client_id in self._state.client_info):
            return True
        else:
            return False

    def check_in_result_cache(self):
        pass

    def _Replica_handler_294(self, current_clock, client_id, public_key, olympus):
        self.output('adding client inside replica clientinfo')
        self._state.client_info[client_id] = public_key
        self.send(('client_registered_at_replica', current_clock, self._id), to=olympus)
    _Replica_handler_294._labels = None
    _Replica_handler_294._notlabels = None

    def _Replica_handler_326(self, client_id, request_id, operation):
        if (self.is_registered_client(client_id) is False):
            self.output('malicious client found')
        if (self._state.is_head_replica is True):
            self.check_in_result_cache(operation)
    _Replica_handler_326._labels = None
    _Replica_handler_326._notlabels = None

    def _Replica_handler_357(self, public_key, private_key):
        self._state.public_key = public_key
        self._state.private_key = private_key
        self.output('yo keys found')
        self.send(('KeysFound',), to=self._id)
    _Replica_handler_357._labels = None
    _Replica_handler_357._notlabels = None

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._OlympusReceivedEvent_1 = []
        self._OlympusReceivedEvent_4 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_0', PatternExpr_482, sources=[PatternExpr_491], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_481]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_1', PatternExpr_520, sources=None, destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_2', PatternExpr_547, sources=[PatternExpr_552], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_546]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_3', PatternExpr_603, sources=[PatternExpr_608], destinations=None, timestamps=None, record_history=None, handlers=[self._Olympus_handler_602]), da.pat.EventPattern(da.pat.ReceivedEvent, '_OlympusReceivedEvent_4', PatternExpr_656, sources=[PatternExpr_661], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, T, count, replica_set, **rest_1049):
        super().setup(T=T, count=count, replica_set=replica_set, **rest_1049)
        self._state.T = T
        self._state.count = count
        self._state.replica_set = replica_set
        self._state.client_info = {}
        self._state.replica_set = self._state.replica_set
        self._state.public_keys = []
        self._state.private_keys = []
        self.initConfiguration(self._state.T, self._state.replica_set)
        self.output('generating keys done at olympus')

    def run(self):
        self.output('inside olympus run')
        c = self.logical_clock()
        for i in range(0, ((2 * self._state.T) + 1)):
            self.send(('store_keys', self._state.public_keys[i], self._state.private_keys[i]), to=self._state.replica_set)
            pass
        super()._label('_st_label_653', block=False)
        _st_label_653 = 0
        while (_st_label_653 == 0):
            _st_label_653 += 1
            if PatternExpr_664.match_iter(self._OlympusReceivedEvent_4, SELF_ID=self._id):
                _st_label_653 += 1
            else:
                super()._label('_st_label_653', block=True)
                _st_label_653 -= 1

    def initConfiguration(self, T, replica_set):
        self._state.T = T
        for i in range(0, ((2 * T) + 1)):
            private_key = nacl.signing.SigningKey.generate()
            public_key = private_key.verify_key
            self._state.public_keys.append(public_key)
            self._state.private_keys.append(private_key)

    def _Olympus_handler_481(self, public_key, client_id, client):
        current_clock = self.logical_clock()
        self._state.client_info[client_id] = public_key
        self.send(('add_new_client', current_clock, public_key, client_id), to=self._state.replica_set)
        super()._label('_st_label_511', block=False)
        replica = None

        def UniversalOpExpr_512():
            nonlocal replica
            for replica in self._state.replica_set:
                if (not PatternExpr_527.match_iter(self._OlympusReceivedEvent_1, _BoundPattern537_=current_clock, _BoundPattern538_=replica, SELF_ID=self._id)):
                    return False
            return True
        _st_label_511 = 0
        while (_st_label_511 == 0):
            _st_label_511 += 1
            if UniversalOpExpr_512():
                _st_label_511 += 1
            else:
                super()._label('_st_label_511', block=True)
                _st_label_511 -= 1
        self.send(('client_registered',), to=client)
    _Olympus_handler_481._labels = None
    _Olympus_handler_481._notlabels = None

    def _Olympus_handler_546(self, client):
        pass
    _Olympus_handler_546._labels = None
    _Olympus_handler_546._notlabels = None

    def _Olympus_handler_602(self, client):
        self.send(('current_active_configuration', self._state.replica_set), to=client)
    _Olympus_handler_602._labels = None
    _Olympus_handler_602._notlabels = None

def readFromConfig():
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ClientReceivedEvent_2 = []
        self._ClientReceivedEvent_3 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_0', PatternExpr_834, sources=[PatternExpr_840], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_833]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_1', PatternExpr_881, sources=[PatternExpr_886], destinations=None, timestamps=None, record_history=None, handlers=[self._Client_handler_880]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_2', PatternExpr_909, sources=[PatternExpr_914], destinations=None, timestamps=None, record_history=True, handlers=[]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ClientReceivedEvent_3', PatternExpr_946, sources=[PatternExpr_951], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, olympus, client_timer_expiry, **rest_1049):
        super().setup(olympus=olympus, client_timer_expiry=client_timer_expiry, **rest_1049)
        self._state.olympus = olympus
        self._state.client_timer_expiry = client_timer_expiry
        self._state.olympus = self._state.olympus
        self._state.client_id = uuid.uuid4()
        self._state.request_id = 0
        self._state.private_key = None
        self._state.public_key = None
        self._state.head_replica = None
        self._state.tail_replica = None
        self._state.replica_set = None
        self.generateCryptoKeys()
        self._state.client_timer_expiry = self._state.client_timer_expiry
        pass

    def run(self):
        self.output('inside client run')
        self.send(('register_client', self._state.public_key, self._state.client_id), to=self._state.olympus)
        super()._label('_st_label_906', block=False)
        _st_label_906 = 0
        while (_st_label_906 == 0):
            _st_label_906 += 1
            if PatternExpr_916.match_iter(self._ClientReceivedEvent_2, _BoundPattern922_=self._state.olympus, SELF_ID=self._id):
                _st_label_906 += 1
            else:
                super()._label('_st_label_906', block=True)
                _st_label_906 -= 1
        operations = {}
        for operation in operations:
            self.send(('perform_operation', self._state.client_id, self._state.request_id), to=self._state.olympus)
            super()._label('_st_label_943', block=False)
            _st_label_943 = 0
            while (_st_label_943 == 0):
                _st_label_943 += 1
                if PatternExpr_953.match_iter(self._ClientReceivedEvent_3, _BoundPattern959_=self._state.olympus, SELF_ID=self._id):
                    _st_label_943 += 1
                else:
                    super()._label('_st_label_943', block=True)
                    _st_label_943 -= 1
            else:
                if (_st_label_943 != 2):
                    continue
            if (_st_label_943 != 2):
                break

    def generateCryptoKeys(self):
        self._state.private_key = nacl.signing.SigningKey.generate()
        self._state.public_key = self._state.private_key.verify_key

    def _Client_handler_833(self, replica_set, olympus):
        self._state.replica_set = replica_set
        count = 0
        for replica in replica_set:
            if (count == 0):
                self._state.head_replica = replica
            elif (count == (len(replica_set) - 1)):
                self._state.tail_replica = replica
    _Client_handler_833._labels = None
    _Client_handler_833._notlabels = None

    def _Client_handler_880(self, olympus):
        self.output((str(self._state.client_id) + 'is successfully registered yoo '))
    _Client_handler_880._labels = None
    _Client_handler_880._notlabels = None

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        T = 1
        client_timer_expiry = 1
        total_replica_count = ((2 * T) + 1)
        replica_set = self.new(Replica, num=total_replica_count)
        olympus = self.new(Olympus, num=1)
        replica_id = 0
        for replica in replica_set:
            replica_id = (replica_id + 1)
            self._setup(replica, (replica_set, replica_id))
        self._setup(olympus, (T, total_replica_count, replica_set))
        self._start(olympus)
        self._start(replica_set)
        clients = self.new(Client, num=2)
        for new_client in clients:
            self._setup(new_client, (olympus, client_timer_expiry))
        self._start(clients)
