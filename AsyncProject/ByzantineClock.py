# -*- generated by 1.0.9 -*-
import da
PatternExpr_320 = da.pat.TuplePattern([da.pat.ConstantPattern('store_keys'), da.pat.FreePattern('public_key'), da.pat.FreePattern('private_key')])
PatternExpr_351 = da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])
PatternExpr_356 = da.pat.SelfPattern()
PatternExpr_359 = da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.TuplePattern([da.pat.FreePattern(None), da.pat.FreePattern(None), da.pat.SelfPattern()]), da.pat.TuplePattern([da.pat.ConstantPattern('KeysFound')])])
_config_object = {}
import sys
import nacl.encoding
import nacl.signing

class Olympus(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, count, replicaSet, **rest_453):
        super().setup(count=count, replicaSet=replicaSet, **rest_453)
        self._state.count = count
        self._state.replicaSet = replicaSet
        self.output('in setup olympus')
        self._state.T = None
        self.initConfiguration()
        self._state.public_keys = []
        self._state.private_keys = []
        for i in range(0, ((2 * self._state.T) + 1)):
            private_key = nacl.signing.SigningKey.generate()
            public_key = private_key.verify_key
            self._state.public_keys.append(public_key)
            self._state.private_keys.append(private_key)
        self.output('generating keys done at olympus')

    def run(self):
        c = self.logical_clock()
        for i in range(0, ((2 * self._state.T) + 1)):
            self.send(('store_keys', self._state.public_keys[i], self._state.private_keys[i]), to=self._state.replicaSet)
            pass

    def initConfiguration(self):
        self._state.T = 1

class Client(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def setup(self, **rest_453):
        super().setup(**rest_453)
        pass

    def run(self):
        pass

class Replica(da.DistProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._ReplicaReceivedEvent_1 = []
        self._events.extend([da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_0', PatternExpr_320, sources=None, destinations=None, timestamps=None, record_history=None, handlers=[self._Replica_handler_319]), da.pat.EventPattern(da.pat.ReceivedEvent, '_ReplicaReceivedEvent_1', PatternExpr_351, sources=[PatternExpr_356], destinations=None, timestamps=None, record_history=True, handlers=[])])

    def setup(self, id, pd, **rest_453):
        super().setup(id=id, pd=pd, **rest_453)
        self._state.id = id
        self._state.pd = pd
        self._state.public_key = None
        self._state.private_key = None
        self.output(('started' + str(self._state.id)))
        pass

    def run(self):
        super()._label('_st_label_348', block=False)
        _st_label_348 = 0
        while (_st_label_348 == 0):
            _st_label_348 += 1
            if PatternExpr_359.match_iter(self._ReplicaReceivedEvent_1, SELF_ID=self._id):
                _st_label_348 += 1
            else:
                super()._label('_st_label_348', block=True)
                _st_label_348 -= 1
        self.output('my public_key is ')
        self.output('my private_key is ')
        pass

    def _Replica_handler_319(self, public_key, private_key):
        self._state.public_key = public_key
        self._state.private_key = private_key
        self.output('yo keys found')
        self.send(('KeysFound',), to=self._id)
    _Replica_handler_319._labels = None
    _Replica_handler_319._notlabels = None

def readFromConfig():
    config = {}
    with open('config.txt', 'r') as f:
        for line in f:
            if (not (line[0] == '#')):
                (key, sep, val) = line.partition('=')
                if (not (len(sep) == 0)):
                    val = val.strip()
                    config[key.strip()] = (int(val) if str.isdecimal(val) else val)
    print(config)

class Node_(da.NodeProcess):

    def __init__(self, procimpl, props):
        super().__init__(procimpl, props)
        self._events.extend([])

    def run(self):
        readFromConfig()
        '\n    nprocs = int(sys.argv[1]) if len(sys.argv) > 1 else 3\n    #nrequests = int(sys.argv[2]) if len(sys.argv) > 2 else 1\n\n    olympus = new(Olympus,num=1)\n    ps = new(Replica, num= nprocs)\n    count = 0\n    for p in ps:\n    \tsetup(p, (count,count))\n    \t#count = count + 1\n    \tpass\n     \t\n    setup(olympus,(count,ps))\n    start(ps)\n    start(olympus)\n    '
