import sys
import nacl.encoding
import nacl.signing
import nacl.hash
import uuid
from nacl.bindings.utils import sodium_memcmp

class Replica(process):
	#def decrypt_message(msg):


	def setup(replica_set:set,replica_id:int):
		self.client_info = {}
		self.public_key = None
		self.private_key =None
		self.data_object = None
		self.replica_id = None
		self.mode =None
		self.result_cache = {}
		self.is_head_replica = False
		self.is_hail_replica = False
		self.replica_set = replica_set
		self.history = None
		self.current_slot_number = 0
		self.result_cache = {}

		if replica_id == 1:
			isHead = True
		elif replica_id == len(replica_set):
			isTail = True

	def is_registered_client(client_id):
		if client_id in self.client_info :
			return True
		else:
			return False

	def check_in_result_cache():
		pass

	#addding a new valid client to clientinfo
	def receive(msg=('add_new_client',current_clock,client_id,public_key),from_=olympus):
		output('adding client inside replica clientinfo')
		self.client_info[client_id] = public_key
		send(('client_registered_at_replica',current_clock,self),to=olympus)

	def receive(msg=('handle_request',client_id,request_id,operation)):
		if is_registered_client(client_id) is False:
			#error case
			output('malicious client found')
		if self.is_head_replica is True:
			check_in_result_cache(operation)


	def receive(msg= ('store_keys',public_key,private_key)):
		self.public_key = public_key
		self.private_key = private_key 
		output('yo keys found')
		send(('KeysFound',),to=self	)

	def run():
		await(received(('KeysFound',), from_=self))
		output("my public_key is ")
		output("my private_key is ")
		await( received(('done',), from_=self) )
		

class Olympus(process):

	def setup(T:int,count:int,replica_set:set):
		self.client_info = {}
		self.replica_set = replica_set
		self.public_keys = []
		self.private_keys = []
		#output('in setup olympus')
		initConfiguration(T,replica_set)

		output('generating keys done at olympus')

	def receive(msg=('register_client',public_key,client_id),from_=client):
		current_clock = logical_clock()
		client_info[client_id] = public_key
		send(('add_new_client',current_clock,public_key,client_id),to=replica_set)
		await(each(replica in replica_set,has=received(('client_registered_at_replica',current_clock,replica))))
		send(('client_registered',),to=client)
	#def receive(msg=('client_added',),from_)

	def receive(msg=('perform_operation',),from_=client):
		pass


	def initConfiguration(T,replica_set):
		self.T = T#readFromConfig()
		for i in range(0,2*T+1):
			private_key = nacl.signing.SigningKey.generate()
			public_key  = private_key.verify_key
			public_keys.append(public_key)
			private_keys.append(private_key)



	#def receive(msg= ('client_registered_at_replica',),from_=client):
	#	output("client successfully registered olympus")

	def receive(msg= ('current_active_configuration',),from_=client):
		send(('current_active_configuration',replica_set),to=client)


	def run():
		output("inside olympus run")
		c= logical_clock()
		for i in range(0,2*T+1):
			send(('store_keys',self.public_keys[i],self.private_keys[i]),to = replica_set)
			pass
		await(received(('done',),from_=self))


def readFromConfig():
	config = {}
	with open('config.txt','r') as f:
	    for line in f:
	        if line[0] != '#':
	          (key,sep,val) = line.partition('=')
	          # if the line does not contain '=', it is invalid and hence ignored
	          if len(sep) != 0:
	              val = val.strip()
	              config[key.strip()] = int(val) if str.isdecimal(val) else val
	print(config)

class Client(process):
	def generateCryptoKeys():
		self.private_key = nacl.signing.SigningKey.generate()
		self.public_key  = private_key.verify_key

	def setup(olympus:Olympus,client_timer_expiry:int):
		
		self.olympus = olympus 
		self.client_id = uuid.uuid4()
		self.request_id = 0
		self.private_key = None
		self.public_key = None
		self.head_replica = None
		self.tail_replica = None
		self.replica_set = None
		generateCryptoKeys()
		self.client_timer_expiry = client_timer_expiry
		pass


	#def getCurrentConfiguration():

	def receive(msg=('current_active_configuration',replica_set),from_=olympus):
		self.replica_set = replica_set
		count = 0
		for replica in replica_set:
			if count == 0:
				self.head_replica = replica
			elif count == len(replica_set) - 1:
				self.tail_replica = replica

	def receive(msg=('client_registered',),from_=olympus):
		output(str(client_id)+'is successfully registered yoo ')

	def run():
		output('inside client run')
		send(('register_client',public_key,client_id),to=olympus)
		await(received(('client_registered',), from_=olympus))
		#send(('current_active_configuration',), to=olympus)
		#await(received(('current_active_configuration',), from_=olympus))
		operations = {}
		for operation in operations:
			send(('perform_operation',client_id,request_id,),to = olympus)
			await(received(('perform_operation',), from_=olympus))



def main():
	T = 1#readFromConfig()
	client_timer_expiry = 1 
	total_replica_count = 2*T+1
	replica_set = new(Replica, num= total_replica_count)
	olympus = new(Olympus,num=1)
	replica_id = 0
	for replica in replica_set:
		replica_id = replica_id + 1
		setup(replica, (replica_set,replica_id))
	
	setup(olympus,(T,total_replica_count,replica_set))
	start(olympus)
	start(replica_set)
	
	clients = new(Client,num=2)
	for new_client in clients:
		setup(new_client,(olympus,client_timer_expiry))
	start(clients)
	


    